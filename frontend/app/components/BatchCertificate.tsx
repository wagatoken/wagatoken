"use client";

import { useState, useEffect, useRef } from "react";
import QRCode from 'qrcode';
import { contractService, BatchInfo } from "@/app/services/contractService";

interface BatchCertificateProps {
  batchId: number;
  userAddress: string;
}

export default function BatchCertificate({ batchId, userAddress }: BatchCertificateProps) {
  const [batchInfo, setBatchInfo] = useState<BatchInfo | null>(null);
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    loadBatchInfo();
  }, [batchId]);

  const loadBatchInfo = async () => {
    try {
      setLoading(true);
      await contractService.initialize();
      const info = await contractService.getBatchInfo(batchId);
      setBatchInfo(info);
      
      // Generate QR code for the batch
      await generateQRCode(info);
    } catch (error) {
      console.error('Error loading batch info:', error);
      setError('Failed to load batch information');
    } finally {
      setLoading(false);
    }
  };

  const generateQRCode = async (info: BatchInfo) => {
    try {
      // Create verification URL with batch details
      const verificationData = {
        batchId: batchId,
        verified: info.isVerified,
        expectedQuantity: info.expectedQuantity,
        currentQuantity: info.currentQuantity,
        productionDate: info.productionDate,
        expiryDate: info.expiryDate,
        pricePerUnit: info.pricePerUnit,
        packaging: info.packagingInfo,
        metadataHash: info.metadataHash,
        timestamp: Date.now(),
        network: 'Base Sepolia',
        contractAddress: process.env.NEXT_PUBLIC_COFFEE_TOKEN_ADDRESS
      };

      // For demo, create a verification URL
      const verificationUrl = `${window.location.origin}/verify?batch=${batchId}&data=${encodeURIComponent(JSON.stringify(verificationData))}`;
      
      // Generate QR code
      const qrDataUrl = await QRCode.toDataURL(verificationUrl, {
        width: 300,
        margin: 2,
        color: {
          dark: '#1f2937',
          light: '#ffffff'
        }
      });
      
      setQrCodeUrl(qrDataUrl);
    } catch (error) {
      console.error('Error generating QR code:', error);
    }
  };

  const downloadCertificate = () => {
    if (!canvasRef.current || !batchInfo) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set canvas size
    canvas.width = 800;
    canvas.height = 1000;

    // Background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Header background
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, 100);
    gradient.addColorStop(0, '#059669');
    gradient.addColorStop(1, '#10b981');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, 100);

    // Title
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('WAGA Coffee Certificate', canvas.width / 2, 60);

    // Reset text alignment
    ctx.textAlign = 'left';
    ctx.fillStyle = '#1f2937';

    // Batch Information
    let y = 150;
    const lineHeight = 40;

    ctx.font = 'bold 24px Arial';
    ctx.fillText(`Batch #${batchId}`, 50, y);
    y += lineHeight + 10;

    ctx.font = '18px Arial';
    const details = [
      `Verification Status: ${batchInfo.isVerified ? '‚úÖ Verified' : '‚ùå Not Verified'}`,
      `Expected Quantity: ${batchInfo.expectedQuantity} bags`,
      `Current Quantity: ${batchInfo.currentQuantity} tokens`,
      `Production Date: ${new Date(batchInfo.productionDate * 1000).toLocaleDateString()}`,
      `Expiry Date: ${new Date(batchInfo.expiryDate * 1000).toLocaleDateString()}`,
      `Price per Unit: ${batchInfo.pricePerUnit} ETH`,
      `Packaging: ${batchInfo.packagingInfo}`,
      `Metadata Verified: ${batchInfo.isMetadataVerified ? 'Yes' : 'No'}`
    ];

    details.forEach(detail => {
      ctx.fillText(detail, 50, y);
      y += lineHeight;
    });

    // QR Code
    if (qrCodeUrl) {
      const qrImage = new Image();
      qrImage.onload = () => {
        const qrSize = 250;
        const qrX = (canvas.width - qrSize) / 2;
        const qrY = y + 20;
        
        ctx.drawImage(qrImage, qrX, qrY, qrSize, qrSize);

        // QR Code label
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Scan to verify on blockchain', canvas.width / 2, qrY + qrSize + 30);

        // Footer
        ctx.font = '14px Arial';
        ctx.fillStyle = '#6b7280';
        ctx.fillText('Generated by WAGA Coffee Traceability System', canvas.width / 2, qrY + qrSize + 60);
        ctx.fillText(`Network: Base Sepolia | Generated: ${new Date().toLocaleString()}`, canvas.width / 2, qrY + qrSize + 80);

        // Download
        const link = document.createElement('a');
        link.download = `WAGA-Batch-${batchId}-Certificate.png`;
        link.href = canvas.toDataURL();
        link.click();
      };
      qrImage.src = qrCodeUrl;
    }
  };

  if (loading) {
    return (
      <div className="web3-card">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
          <span className="ml-3 text-gray-600">Generating certificate...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="web3-card">
        <div className="text-red-500 text-center py-6">{error}</div>
      </div>
    );
  }

  if (!batchInfo) {
    return (
      <div className="web3-card">
        <div className="text-gray-500 text-center py-6">No batch information available</div>
      </div>
    );
  }

  return (
    <div className="web3-card">
      <div className="text-center mb-6">
        <h3 className="text-2xl font-bold web3-gradient-text mb-2">
          üìú Batch Certificate
        </h3>
        <p className="text-gray-400">
          Digital certificate for coffee batch #{batchId}
        </p>
      </div>

      <div className="space-y-6">
        {/* Certificate Preview */}
        <div className="border-2 border-gray-200 rounded-lg p-6 bg-gradient-to-br from-white to-gray-50">
          <div className="text-center mb-6">
            <div className="bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-6 rounded-lg inline-block mb-4">
              <h2 className="text-xl font-bold">WAGA Coffee Certificate</h2>
            </div>
            <h3 className="text-2xl font-bold text-gray-800">Batch #{batchId}</h3>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div className="space-y-2">
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Verification Status:</span>
                <span className={batchInfo.isVerified ? 'text-green-600' : 'text-red-600'}>
                  {batchInfo.isVerified ? '‚úÖ Verified' : '‚ùå Not Verified'}
                </span>
              </div>
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Expected Quantity:</span>
                <span className="text-gray-800">{batchInfo.expectedQuantity} bags</span>
              </div>
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Current Tokens:</span>
                <span className="text-gray-800">{batchInfo.currentQuantity} tokens</span>
              </div>
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Price per Unit:</span>
                <span className="text-gray-800">{batchInfo.pricePerUnit} ETH</span>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Production Date:</span>
                <span className="text-gray-800">
                  {new Date(batchInfo.productionDate * 1000).toLocaleDateString()}
                </span>
              </div>
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Expiry Date:</span>
                <span className="text-gray-800">
                  {new Date(batchInfo.expiryDate * 1000).toLocaleDateString()}
                </span>
              </div>
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Packaging:</span>
                <span className="text-gray-800">{batchInfo.packagingInfo}</span>
              </div>
              <div className="flex justify-between py-2 border-b border-gray-200">
                <span className="font-medium text-gray-600">Metadata Verified:</span>
                <span className={batchInfo.isMetadataVerified ? 'text-green-600' : 'text-yellow-600'}>
                  {batchInfo.isMetadataVerified ? 'Yes' : 'Pending'}
                </span>
              </div>
            </div>
          </div>

          {/* QR Code */}
          <div className="text-center">
            {qrCodeUrl && (
              <div className="inline-block">
                <img 
                  src={qrCodeUrl} 
                  alt="Batch verification QR code"
                  className="mx-auto mb-2 border-2 border-gray-300 rounded-lg"
                />
                <p className="text-sm text-gray-600">Scan to verify on blockchain</p>
              </div>
            )}
          </div>

          <div className="text-center mt-6 text-xs text-gray-500">
            <p>Generated by WAGA Coffee Traceability System</p>
            <p>Network: Base Sepolia | Generated: {new Date().toLocaleString()}</p>
          </div>
        </div>

        {/* Actions */}
        <div className="flex flex-col sm:flex-row gap-4">
          <button
            onClick={downloadCertificate}
            className="flex-1 web3-gradient-button"
          >
            üìÑ Download Certificate
          </button>
          
          <button
            onClick={() => window.open(`/verify?batch=${batchId}`, '_blank')}
            className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-6 rounded-lg font-semibold transition-all duration-300"
          >
            üîç Verify Online
          </button>
        </div>

        {/* Metadata Hash */}
        <div className="p-4 bg-gray-100 rounded-lg">
          <h4 className="text-sm font-semibold text-gray-700 mb-2">Metadata Hash (IPFS)</h4>
          <p className="text-xs text-gray-600 font-mono break-all">
            {batchInfo.metadataHash}
          </p>
        </div>
      </div>

      {/* Hidden canvas for certificate generation */}
      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </div>
  );
}
